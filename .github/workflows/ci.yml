name: Enhanced CI/CD Pipeline

on:
  push:
  pull_request:
    branches: [main, develop, feature/**]

jobs:
  code-quality:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest pytest-asyncio pytest-cov flake8 black bandit safety mypy

      - name: Code formatting check (Black)
        run: |
          black --check --diff .

      - name: Linting (Flake8)
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Type checking (MyPy)
        run: |
          mypy --ignore-missing-imports --disallow-untyped-defs botnet_controller.py botnet_server_enhanced.py utils.py
        continue-on-error: true

      - name: Security scanning (Bandit)
        run: |
          bandit -r . -f json -o bandit-report.json || true
          bandit -r . --severity-level medium --confidence-level medium

      - name: Dependency security check (Safety)
        run: |
          safety check --json --output safety-report.json || true
          safety check

      - name: Run tests with coverage
        run: |
          pytest --cov=. --cov-report=xml --cov-report=html --cov-report=term tests/ test_basic.py -v

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports-${{ matrix.python-version }}
          path: |
            bandit-report.json
            safety-report.json
            coverage.xml

  integration-tests:
    runs-on: ubuntu-latest
    needs: code-quality

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Test imports and basic functionality
        run: |
          python -c "import utils; print('‚úÖ Utils module imports successfully')"
          python -c "import botnet_controller; print('‚úÖ Controller module imports successfully')"
          python -c "import botnet_server_enhanced; print('‚úÖ Enhanced server module imports successfully')"

      - name: Test encryption functionality
        run: |
          python -c "
          from utils import SecureEncryption
          enc = SecureEncryption()
          data = b'test data'
          encrypted = enc.encrypt(data)
          decrypted = enc.decrypt(encrypted)
          assert decrypted == data
          print('‚úÖ Encryption tests pass')
          "

      - name: Test configuration management
        run: |
          python -c "
          import os
          from utils import SecureConfig
          os.environ['BOTNET_HOST'] = '127.0.0.1'
          os.environ['BOTNET_PORT'] = '8080'
          config = SecureConfig()
          assert config.get('SERVER_HOST') == '127.0.0.1'
          assert config.get('SERVER_PORT') == 8080
          print('‚úÖ Configuration tests pass')
          "

      - name: Performance benchmarks
        run: |
          python -c "
          import time
          from utils import SecureEncryption, BotTracker
          
          # Encryption benchmark
          enc = SecureEncryption()
          start = time.time()
          for i in range(1000):
              encrypted = enc.encrypt(b'benchmark data')
              decrypted = enc.decrypt(encrypted)
          enc_time = time.time() - start
          print(f'‚úÖ Encryption benchmark: {enc_time:.3f}s for 1000 ops')
          
          # Bot tracking benchmark  
          import asyncio
          async def track_test():
              tracker = BotTracker()
              start = time.time()
              for i in range(100):
                  await tracker.add_bot(f'bot_{i}', f'192.168.1.{i}')
              track_time = time.time() - start
              print(f'‚úÖ Bot tracking benchmark: {track_time:.3f}s for 100 bots')
          
          asyncio.run(track_test())
          "

  security-audit:
    runs-on: ubuntu-latest
    needs: code-quality

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety semgrep

      - name: Advanced security scan (Bandit)
        run: |
          bandit -r . -f json -o bandit-detailed.json
          bandit -r . --severity-level low --confidence-level low -f txt

      - name: Semgrep security scan
        run: |
          semgrep --config=auto . --json --output=semgrep-report.json || true
          semgrep --config=auto . --severity=ERROR

      - name: Check for hardcoded secrets
        run: |
          grep -r -n -i "password\|secret\|key\|token" --exclude-dir=.git --exclude="*.json" . || echo "No obvious hardcoded secrets found"
          
      - name: Validate no XOR encryption usage
        run: |
          if grep -r "XOR\|xor" --exclude-dir=.git --exclude-dir=.pytest_cache --exclude="test_*.py" --exclude="*security*" .; then
            echo "‚ùå XOR encryption found - this is insecure!"
            exit 1
          else
            echo "‚úÖ No insecure XOR encryption found"
          fi

      - name: Check for secure defaults
        run: |
          python -c "
          from utils import SecureConfig, SecureEncryption
          
          # Test secure defaults
          config = SecureConfig()
          assert config.get('SERVER_HOST') == '0.0.0.0'  # Should bind to all interfaces by default
          assert config.get('LOG_LEVEL') == 'INFO'  # Should not be DEBUG by default
          
          # Test encryption key generation
          key = config.get_encryption_key()
          assert len(key) == 32  # Should be 256-bit key
          
          print('‚úÖ Secure defaults validated')
          "

      - name: Upload security artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-audit-reports
          path: |
            bandit-detailed.json
            semgrep-report.json

  documentation-check:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check documentation completeness
        run: |
          # Check for README
          if [ ! -f README.md ]; then
            echo "‚ùå README.md missing"
            exit 1
          fi
          echo "‚úÖ README.md present"
          
          # Check for license
          if [ ! -f LICENSE ]; then
            echo "‚ùå LICENSE missing"
            exit 1
          fi
          echo "‚úÖ LICENSE present"
          
          # Check for requirements
          if [ ! -f requirements.txt ]; then
            echo "‚ùå requirements.txt missing"
            exit 1
          fi
          echo "‚úÖ requirements.txt present"
          
          # Check for gitignore
          if [ ! -f .gitignore ]; then
            echo "‚ùå .gitignore missing"
            exit 1
          fi
          echo "‚úÖ .gitignore present"

      - name: Check docstring coverage
        run: |
          python -m pip install --upgrade pip
          pip install docstring-coverage
          docstring-coverage . --badge=docs --skip-file-doc

  final-validation:
    runs-on: ubuntu-latest
    needs: [code-quality, integration-tests, security-audit, documentation-check]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Final comprehensive test
        run: |
          pytest tests/ test_basic.py -v --tb=short

      - name: Validate all improvements
        run: |
          python -c "
          print('üîç Validating Enhanced Botnet Implementation...')
          
          # Test all major components
          from utils import SecureConfig, SecureEncryption, InputValidator, SecureLogger, BotTracker
          import botnet_controller
          import botnet_server_enhanced
          
          # Validate security features
          config = SecureConfig()
          encryption = SecureEncryption()
          validator = InputValidator()
          logger = SecureLogger('validation', 'INFO')
          tracker = BotTracker()
          
          print('‚úÖ All security components initialized')
          
          # Test encryption
          test_data = b'validation test'
          encrypted = encryption.encrypt(test_data)
          decrypted = encryption.decrypt(encrypted)
          assert decrypted == test_data
          print('‚úÖ Encryption/decryption working')
          
          # Test validation
          assert validator.validate_ip_address('127.0.0.1')
          assert validator.validate_port(9999)
          print('‚úÖ Input validation working')
          
          # Test controller initialization
          controller = botnet_controller.BotnetController()
          assert hasattr(controller, 'encryption')
          assert hasattr(controller, 'bot_tracker')
          print('‚úÖ Enhanced controller initialized')
          
          # Test server initialization
          server = botnet_server_enhanced.EnhancedBotnetServer()
          assert hasattr(server, 'encryption')
          assert hasattr(server, 'bot_tracker')
          print('‚úÖ Enhanced server initialized')
          
          print('üéâ All enhancements validated successfully!')
          print('üìä Implementation includes:')
          print('  - Secure AES encryption (XOR removed)')
          print('  - Async/await architecture')
          print('  - Input validation & sanitization')
          print('  - Comprehensive logging with sanitization')
          print('  - Environment-based configuration')
          print('  - Performance optimizations')
          print('  - Extensive test coverage')
          print('  - Security scanning in CI/CD')
          "
